[gd_resource type="VisualShader" load_steps=141 format=2]

[ext_resource path="res://addons/VShader_Nodes/GerstnerWaves.gd" type="Script" id=1]
[ext_resource path="res://Textures/wave_normal01.png" type="Texture" id=2]
[ext_resource path="res://Textures/distorted_noise01.png" type="Texture" id=3]
[ext_resource path="res://Textures/flowmap.png" type="Texture" id=4]
[ext_resource path="res://Textures/whitecaps02.png" type="Texture" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=1]

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 16.0

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=8]
octaves = 5
persistence = 1.0
lacunarity = 1.65

[sub_resource type="NoiseTexture" id=9]
noise = SubResource( 8 )

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = SubResource( 9 )

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=12]

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=13]
default_input_values = [ 0, 0.5, 1, 0.2, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 0.3 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, 0.0, 1, 0.15 ]
operator = 7

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 6

[sub_resource type="VisualShaderNodeExpression" id=17]
size = Vector2( 562, 232 )
expression = "depth = 2.0 * depth - 1.0;
difference = near * far / (far + depth * (near - far));"

[sub_resource type="VisualShaderNodeInput" id=18]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=19]
source = 4

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeVectorDecompose" id=21]

[sub_resource type="VisualShaderNodeExpression" id=22]
size = Vector2( 562, 232 )
expression = "depth = 2.0 * depth - 1.0;
difference = near * far / (far + depth * (near - far));"

[sub_resource type="VisualShaderNodeScalarConstant" id=23]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarConstant" id=24]
constant = 30000.0

[sub_resource type="VisualShaderNodeScalarOp" id=25]
operator = 1

[sub_resource type="VisualShaderNodeScalarClamp" id=26]

[sub_resource type="VisualShaderNodeScalarOp" id=27]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorScalarMix" id=28]

[sub_resource type="VisualShaderNodeColorConstant" id=29]
constant = Color( 0.298309, 0.449219, 0.364332, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=30]
constant = 0.99

[sub_resource type="VisualShaderNodeScalarConstant" id=31]
constant = 0.4

[sub_resource type="Gradient" id=32]
colors = PoolColorArray( 0.161133, 0.25, 0.200012, 1, 0.178223, 0.230674, 0.3125, 1 )

[sub_resource type="GradientTexture" id=33]
gradient = SubResource( 32 )

[sub_resource type="VisualShaderNodeTexture" id=34]
texture = SubResource( 33 )

[sub_resource type="VisualShaderNodeScalarOp" id=35]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=36]

[sub_resource type="VisualShaderNodeInput" id=37]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=38]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=39]
constant = 4.0

[sub_resource type="VisualShaderNodeFresnel" id=40]

[sub_resource type="VisualShaderNodeScalarFunc" id=41]
function = 31

[sub_resource type="VisualShaderNodeScalarConstant" id=42]
constant = 0.05

[sub_resource type="VisualShaderNodeTexture" id=43]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeInput" id=44]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=45]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=46]
constant = 8.0

[sub_resource type="VisualShaderNodeTexture" id=47]
texture = ExtResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=48]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorOp" id=49]

[sub_resource type="VisualShaderNodeVectorOp" id=50]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=51]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=52]
function = 17

[sub_resource type="VisualShaderNodeVectorOp" id=53]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=54]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=55]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeVectorOp" id=56]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=57]
function = 17

[sub_resource type="VisualShaderNodeInput" id=58]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=59]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=60]

[sub_resource type="VisualShaderNodeInput" id=61]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=62]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=63]
function = 17

[sub_resource type="VisualShaderNodeScalarFunc" id=64]
function = 12

[sub_resource type="VisualShaderNodeScalarOp" id=65]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=66]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=67]
constant = 0.25

[sub_resource type="VisualShaderNodeInput" id=68]
input_name = "binormal"

[sub_resource type="VisualShaderNodeInput" id=69]
input_name = "tangent"

[sub_resource type="VisualShaderNodeVectorOp" id=70]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=71]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=72]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=73]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=74]

[sub_resource type="VisualShaderNodeVectorOp" id=75]

[sub_resource type="VisualShaderNodeInput" id=76]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=77]

[sub_resource type="VisualShaderNodeVectorDecompose" id=78]

[sub_resource type="VisualShaderNodeVectorCompose" id=79]

[sub_resource type="VisualShaderNodeVectorOp" id=80]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.25, 0.25, 0.25 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=81]

[sub_resource type="VisualShaderNodeTexture" id=82]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeInput" id=83]
input_name = "color"

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=84]
default_input_values = [ 0, 0.0, 1, 0.1, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=85]
default_input_values = [ 0, 0.0, 1, 0.1, 2, 0.0 ]

[sub_resource type="VisualShaderNodeColorConstant" id=86]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=87]
default_input_values = [ 0, 0.0, 1, 6.0 ]
operator = 5

[sub_resource type="VisualShaderNodeScalarOp" id=88]
default_input_values = [ 0, 0.0, 1, 3.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=89]

[sub_resource type="VisualShaderNodeScalarClamp" id=90]

[sub_resource type="VisualShaderNodeTexture" id=91]
texture = ExtResource( 5 )

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=92]
default_input_values = [ 0, 0.0, 1, 0.08, 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=93]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=94]
constant = 0.8

[sub_resource type="VisualShaderNodeVec3Constant" id=95]
constant = Vector3( 1, 0, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=96]
constant = 0.4

[sub_resource type="VisualShaderNodeScalarConstant" id=97]
constant = 0.72

[sub_resource type="VisualShaderNodeScalarConstant" id=98]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=99]
input_name = "time"

[sub_resource type="VisualShaderNodeCustom" id=100]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeCustom" id=101]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=102]
input_name = "normal"

[sub_resource type="VisualShaderNodeScalarConstant" id=103]
constant = 0.3

[sub_resource type="VisualShaderNodeVec3Constant" id=104]
constant = Vector3( 0.4, 0, 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=105]
constant = 0.17

[sub_resource type="VisualShaderNodeScalarConstant" id=106]
constant = 0.72

[sub_resource type="VisualShaderNodeScalarConstant" id=107]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=108]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=109]
constant = 0.1

[sub_resource type="VisualShaderNodeCustom" id=110]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=111]
operator = 6

[sub_resource type="VisualShaderNodeScalarOp" id=112]
operator = 6

[sub_resource type="VisualShaderNodeScalarConstant" id=113]
constant = 0.5

[sub_resource type="VisualShaderNodeVec3Constant" id=114]
constant = Vector3( -0.6, 0, -0.15 )

[sub_resource type="VisualShaderNodeScalarConstant" id=115]
constant = 0.32

[sub_resource type="VisualShaderNodeScalarConstant" id=116]
constant = 0.24

[sub_resource type="VisualShaderNodeScalarConstant" id=117]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=118]
input_name = "time"

[sub_resource type="VisualShaderNodeVec3Constant" id=119]
constant = Vector3( -0.3, 0, 1 )

[sub_resource type="VisualShaderNodeCustom" id=120]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=121]
operator = 6

[sub_resource type="VisualShaderNodeScalarOp" id=122]
default_input_values = [ 0, 0.0, 1, 0.6 ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=123]

[sub_resource type="NoiseTexture" id=124]
noise = SubResource( 123 )

[sub_resource type="VisualShaderNodeTexture" id=125]
texture = SubResource( 124 )

[sub_resource type="VisualShaderNodeInput" id=126]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=127]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=128]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=129]

[sub_resource type="VisualShaderNodeScalarOp" id=130]

[sub_resource type="VisualShaderNodeScalarOp" id=131]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=132]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=133]
constant = 0.8

[sub_resource type="VisualShaderNodeScalarConstant" id=134]
constant = 1.4

[sub_resource type="VisualShaderNodeInput" id=135]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode depth_draw_always, cull_disabled, specular_phong;

uniform sampler2D tex_vtx_43;uniform sampler2D tex_frg_45;uniform sampler2D tex_frg_40;uniform sampler2D tex_frg_47;uniform sampler2D tex_frg_20;uniform sampler2D tex_frg_97;uniform sampler2D tex_frg_86;uniform sampler2D tex_frg_109;

// GerstnerWaves

		
		mat3 displace_normals(float t, float wl, vec3 wv, float ws, float amp, float steep, vec3 p, vec3 n) {
			
			float k = 2.0 * 3.14159 / wl;
			float a = steep / k;
			float c = sqrt(9.8 / k);
			vec2 wavec = normalize(vec2(wv.x, wv.z));
			float f = k * dot(wavec, p.xz) - c * t * ws;
			p.x += wavec.x * (a * cos(f));
			p.y += a * sin(f) * amp;
			p.z += wavec.y * (a * cos(f));
			
			vec3 tangent = vec3(
				1.0 - wavec.x * wavec.x * (steep * sin(f)),
				wavec.x * (steep * cos(f)),
				-wavec.x * wavec.y * (steep * sin(f))
			);
			
			vec3 binormal = vec3(
				-wavec.x * wavec.y * ( steep * sin(f)),
				wavec.y * (steep * cos(f)),
				1.0 - wavec.y * wavec.y * (steep * sin(f))
			);
			
			float peak = (sin(f) * a);
			
			vec3 norm = normalize(cross(binormal, tangent));
			vec3 normsum = normalize(n + norm);
			mat3 remat = mat3(p, normsum, vec3(peak, 0,0));
			return remat;
		}
	

void vertex() {
// Input:44
	vec3 n_out44p0;
	n_out44p0 = vec3(UV,0.0);

// Texture:43
	vec3 n_out43p0;
	float n_out43p1;
	vec4 tex_vtx_43_read = texture( tex_vtx_43 , n_out44p0.xy );
	n_out43p0 = tex_vtx_43_read.rgb;
	n_out43p1 = tex_vtx_43_read.a;

// ScalarOp:49
	float n_in49p1 = 2.00000;
	float n_out49p0;
	n_out49p0 = dot(n_out43p0,vec3(0.333333,0.333333,0.333333)) * n_in49p1;

// Input:19
	float n_out19p0;
	n_out19p0 = TIME;

// ScalarOp:48
	float n_out48p0;
	n_out48p0 = n_out49p0 + n_out19p0;

// Scalar:36
	float n_out36p0;
	n_out36p0 = 0.320000;

// Vector:35
	vec3 n_out35p0;
	n_out35p0 = vec3(-0.600000,0.000000,-0.150000);

// Scalar:38
	float n_out38p0;
	n_out38p0 = 1.000000;

// Scalar:37
	float n_out37p0;
	n_out37p0 = 0.240000;

// Scalar:34
	float n_out34p0;
	n_out34p0 = 0.500000;

// Input:29
	float n_out29p0;
	n_out29p0 = TIME;

// Scalar:26
	float n_out26p0;
	n_out26p0 = 0.170000;

// Vector:25
	vec3 n_out25p0;
	n_out25p0 = vec3(0.400000,0.000000,1.000000);

// Scalar:28
	float n_out28p0;
	n_out28p0 = 1.000000;

// Scalar:27
	float n_out27p0;
	n_out27p0 = 0.720000;

// Scalar:24
	float n_out24p0;
	n_out24p0 = 0.300000;

// Scalar:14
	float n_out14p0;
	n_out14p0 = 0.400000;

// Vector:13
	vec3 n_out13p0;
	n_out13p0 = vec3(1.000000,0.000000,1.000000);

// Scalar:16
	float n_out16p0;
	n_out16p0 = 1.000000;

// Scalar:15
	float n_out15p0;
	n_out15p0 = 0.720000;

// Scalar:12
	float n_out12p0;
	n_out12p0 = 0.800000;

// ScalarOp:46
	float n_out46p0;
	n_out46p0 = dot(n_out43p0,vec3(0.333333,0.333333,0.333333)) * n_out12p0;

// Input:11
	float n_out11p0;
	n_out11p0 = TIME;

// ScalarOp:47
	float n_out47p0;
	n_out47p0 = n_out49p0 + n_out11p0;

// Scalar:6
	float n_out6p0;
	n_out6p0 = 0.500000;

// Vector:4
	vec3 n_out4p0;
	n_out4p0 = vec3(-0.300000,0.000000,1.000000);

// Scalar:8
	float n_out8p0;
	n_out8p0 = 1.400000;

// Scalar:7
	float n_out7p0;
	n_out7p0 = 0.800000;

// ScalarOp:45
	float n_out45p0;
	n_out45p0 = n_out49p0 * n_out7p0;

// Scalar:3
	float n_out3p0;
	n_out3p0 = 0.100000;

// Input:9
	vec3 n_out9p0;
	n_out9p0 = VERTEX;

// Input:23
	vec3 n_out23p0;
	n_out23p0 = NORMAL;

// GerstnerWaves:2
	vec3 n_out2p0;
	vec3 n_out2p1;
	float n_out2p2;
	{
		
			mat3 disp = displace_normals(n_out47p0, n_out6p0, n_out4p0, n_out8p0, n_out45p0, n_out3p0, n_out9p0, n_out23p0);
			n_out2p0 = disp[0];
			n_out2p1 = disp[1];
			n_out2p2 = disp[2].x;
		
			
	}
// GerstnerWaves:20
	vec3 n_out20p0;
	vec3 n_out20p1;
	float n_out20p2;
	{
		
			mat3 disp = displace_normals(n_out48p0, n_out14p0, n_out13p0, n_out16p0, n_out15p0, n_out46p0, n_out2p0, n_out2p1);
			n_out20p0 = disp[0];
			n_out20p1 = disp[1];
			n_out20p2 = disp[2].x;
		
			
	}
// GerstnerWaves:30
	vec3 n_out30p0;
	vec3 n_out30p1;
	float n_out30p2;
	{
		
			mat3 disp = displace_normals(n_out29p0, n_out26p0, n_out25p0, n_out28p0, n_out27p0, n_out24p0, n_out20p0, n_out20p1);
			n_out30p0 = disp[0];
			n_out30p1 = disp[1];
			n_out30p2 = disp[2].x;
		
			
	}
// GerstnerWaves:40
	vec3 n_out40p0;
	vec3 n_out40p1;
	float n_out40p2;
	{
		
			mat3 disp = displace_normals(n_out48p0, n_out36p0, n_out35p0, n_out38p0, n_out37p0, n_out34p0, n_out30p0, n_out30p1);
			n_out40p0 = disp[0];
			n_out40p1 = disp[1];
			n_out40p2 = disp[2].x;
		
			
	}
// ScalarOp:42
	float n_in42p1 = 0.60000;
	float n_out42p0;
	n_out42p0 = n_out40p2 * n_in42p1;

// ScalarOp:32
	float n_out32p0;
	n_out32p0 = max( n_out20p2 , n_out2p2 );

// ScalarOp:31
	float n_out31p0;
	n_out31p0 = max( n_out30p2 , n_out32p0 );

// ScalarOp:41
	float n_out41p0;
	n_out41p0 = max( n_out42p0 , n_out31p0 );

// Output:0
	VERTEX = n_out40p0;
	NORMAL = n_out40p1;
	COLOR.rgb = vec3(n_out41p0);

}

void fragment() {
// Color:129
	vec3 n_out129p0;
	float n_out129p1;
	n_out129p0 = vec3(0.298309,0.449219,0.364332);
	n_out129p1 = 1.000000;

// Input:50
	float n_out50p0;
	n_out50p0 = TIME;

// ScalarFunc:51
	float n_out51p0;
	n_out51p0 = fract(n_out50p0);

// Texture:45
	vec3 n_out45p0;
	float n_out45p1;
	vec4 tex_frg_45_read = texture( tex_frg_45 , UV.xy );
	n_out45p0 = tex_frg_45_read.rgb;
	n_out45p1 = tex_frg_45_read.a;

// VectorOp:52
	vec3 n_in52p1 = vec3(2.00000,2.00000,2.00000);
	vec3 n_out52p0;
	n_out52p0 = n_out45p0 * n_in52p1;

// VectorOp:53
	vec3 n_in53p1 = vec3(1.00000,1.00000,1.00000);
	vec3 n_out53p0;
	n_out53p0 = n_out52p0 - n_in53p1;

// Scalar:70
	float n_out70p0;
	n_out70p0 = 0.250000;

// VectorOp:69
	vec3 n_out69p0;
	n_out69p0 = n_out53p0 * vec3(n_out70p0);

// VectorOp:49
	vec3 n_out49p0;
	n_out49p0 = vec3(n_out51p0) * n_out69p0;

// Input:42
	vec3 n_out42p0;
	n_out42p0 = vec3(UV,0.0);

// Scalar:44
	float n_out44p0;
	n_out44p0 = 8.000000;

// VectorOp:43
	vec3 n_out43p0;
	n_out43p0 = n_out42p0 * vec3(n_out44p0);

// VectorOp:48
	vec3 n_out48p0;
	n_out48p0 = n_out49p0 + n_out43p0;

// Texture:40
	vec3 n_out40p0;
	float n_out40p1;
	vec4 tex_frg_40_read = texture( tex_frg_40 , n_out48p0.xy );
	n_out40p0 = tex_frg_40_read.rgb;
	n_out40p1 = tex_frg_40_read.a;

// Input:59
	float n_out59p0;
	n_out59p0 = TIME;

// ScalarOp:54
	float n_in54p1 = 0.50000;
	float n_out54p0;
	n_out54p0 = n_out59p0 + n_in54p1;

// ScalarFunc:56
	float n_out56p0;
	n_out56p0 = fract(n_out54p0);

// VectorOp:55
	vec3 n_out55p0;
	n_out55p0 = vec3(n_out56p0) * n_out69p0;

// VectorOp:60
	vec3 n_out60p0;
	n_out60p0 = n_out55p0 + n_out43p0;

// Texture:47
	vec3 n_out47p0;
	float n_out47p1;
	vec4 tex_frg_47_read = texture( tex_frg_47 , n_out60p0.xy );
	n_out47p0 = tex_frg_47_read.rgb;
	n_out47p1 = tex_frg_47_read.a;

// Input:62
	float n_out62p0;
	n_out62p0 = TIME;

// ScalarFunc:66
	float n_out66p0;
	n_out66p0 = fract(n_out62p0);

// ScalarOp:64
	float n_in64p1 = 0.50000;
	float n_out64p0;
	n_out64p0 = n_out66p0 - n_in64p1;

// ScalarFunc:67
	float n_out67p0;
	n_out67p0 = abs(n_out64p0);

// ScalarOp:68
	float n_in68p1 = 2.00000;
	float n_out68p0;
	n_out68p0 = n_out67p0 * n_in68p1;

// VectorScalarMix:61
	vec3 n_out61p0;
	n_out61p0 = mix( n_out40p0 , n_out47p0 , n_out68p0 );

// VectorOp:75
	vec3 n_in75p1 = vec3(2.00000,2.00000,2.00000);
	vec3 n_out75p0;
	n_out75p0 = n_out61p0 * n_in75p1;

// VectorOp:74
	vec3 n_in74p1 = vec3(1.00000,1.00000,1.00000);
	vec3 n_out74p0;
	n_out74p0 = n_out75p0 - n_in74p1;

// VectorOp:84
	vec3 n_in84p1 = vec3(0.25000,0.25000,0.25000);
	vec3 n_out84p0;
	n_out84p0 = n_out74p0 * n_in84p1;

// Input:72
	vec3 n_out72p0;
	n_out72p0 = TANGENT;

// VectorOp:76
	vec3 n_out76p0;
	n_out76p0 = n_out84p0 * n_out72p0;

// Input:71
	vec3 n_out71p0;
	n_out71p0 = BINORMAL;

// VectorOp:77
	vec3 n_out77p0;
	n_out77p0 = n_out84p0 * n_out71p0;

// VectorOp:79
	vec3 n_out79p0;
	n_out79p0 = n_out76p0 + n_out77p0;

// Input:80
	vec3 n_out80p0;
	n_out80p0 = NORMAL;

// VectorOp:81
	vec3 n_out81p0;
	n_out81p0 = n_out79p0 + n_out80p0;

// VectorDecompose:82
	float n_out82p0;
	float n_out82p1;
	float n_out82p2;
	n_out82p0 = n_out81p0.x;
	n_out82p1 = n_out81p0.y;
	n_out82p2 = n_out81p0.z;

// VectorDecompose:78
	float n_out78p0;
	float n_out78p1;
	float n_out78p2;
	n_out78p0 = n_out80p0.x;
	n_out78p1 = n_out80p0.y;
	n_out78p2 = n_out80p0.z;

// VectorCompose:83
	vec3 n_out83p0;
	n_out83p0 = vec3( n_out82p0 , n_out82p1 , n_out78p2 );

// VectorFunc:85
	vec3 n_out85p0;
	n_out85p0=normalize(n_out83p0);

// Fresnel:37
	bool n_in37p2 = false;
	float n_in37p3 = 1.00000;
	float n_out37p0;
	n_out37p0 = n_in37p2 ? (pow(clamp(dot(n_out85p0, VIEW), 0.0, 1.0), n_in37p3)) : (pow(1.0 - clamp(dot(n_out85p0, VIEW), 0.0, 1.0), n_in37p3));
// Texture:20
	vec3 n_out20p0;
	float n_out20p1;
	vec4 tex_frg_20_read = texture( tex_frg_20 , vec3(n_out37p0).xy );
	n_out20p0 = tex_frg_20_read.rgb;
	n_out20p1 = tex_frg_20_read.a;

// Scalar:123
	float n_out123p0;
	n_out123p0 = 0.100000;

// Scalar:124
	float n_out124p0;
	n_out124p0 = 30000.000000;

// Input:118
	vec3 n_out118p0;
	n_out118p0 = vec3(SCREEN_UV,0.0);

// Texture:119
	float n_out119p0;
	float n_out119p1;
	{
		float _depth = texture( DEPTH_TEXTURE , n_out118p0.xy ).r;
		n_out119p0 = _depth;
		n_out119p1 = 1.0;
	}

// Expression:117
	float n_out117p0;
	n_out117p0=0.0;
	{
		n_out119p0 = 2.0 * n_out119p0 - 1.0;
		n_out117p0 = n_out123p0 * n_out124p0 / (n_out124p0 + n_out119p0 * (n_out123p0 - n_out124p0));
	}
// Input:120
	vec3 n_out120p0;
	n_out120p0 = FRAGCOORD.xyz;

// VectorDecompose:121
	float n_out121p0;
	float n_out121p1;
	float n_out121p2;
	n_out121p0 = n_out120p0.x;
	n_out121p1 = n_out120p0.y;
	n_out121p2 = n_out120p0.z;

// Expression:122
	float n_out122p0;
	n_out122p0=0.0;
	{
		n_out121p2 = 2.0 * n_out121p2 - 1.0;
		n_out122p0 = n_out123p0 * n_out124p0 / (n_out124p0 + n_out121p2 * (n_out123p0 - n_out124p0));
	}
// ScalarOp:125
	float n_out125p0;
	n_out125p0 = n_out117p0 - n_out122p0;

// ScalarOp:127
	float n_in127p1 = 1.00000;
	float n_out127p0;
	n_out127p0 = n_out125p0 * n_in127p1;

// ScalarClamp:126
	float n_in126p1 = 0.00000;
	float n_in126p2 = 1.00000;
	float n_out126p0;
	n_out126p0 = clamp( n_out127p0, n_in126p1, n_in126p2 );

// VectorScalarMix:128
	vec3 n_out128p0;
	n_out128p0 = mix( n_out129p0 , n_out20p0 , n_out126p0 );

// Input:101
	vec3 n_out101p0;
	n_out101p0 = vec3(UV,0.0);

// Scalar:103
	float n_out103p0;
	n_out103p0 = 16.000000;

// VectorOp:102
	vec3 n_out102p0;
	n_out102p0 = n_out101p0 * vec3(n_out103p0);

// Texture:97
	vec3 n_out97p0;
	float n_out97p1;
	vec4 tex_frg_97_read = texture( tex_frg_97 , n_out102p0.xy );
	n_out97p0 = tex_frg_97_read.rgb;
	n_out97p1 = tex_frg_97_read.a;

// Input:87
	vec3 n_out87p0;
	n_out87p0 = COLOR.rgb;

// ScalarOp:107
	float n_in107p1 = 1.00000;
	float n_out107p0;
	n_out107p0 = dot(n_out87p0,vec3(0.333333,0.333333,0.333333)) * n_in107p1;

// ScalarSmoothStep:98
	float n_in98p0 = 0.00000;
	float n_in98p1 = 0.08000;
	float n_out98p0;
	n_out98p0 = smoothstep( n_in98p0, n_in98p1, n_out107p0 );

// ScalarOp:106
	float n_out106p0;
	n_out106p0 = dot(n_out97p0,vec3(0.333333,0.333333,0.333333)) * n_out98p0;

// ScalarSmoothStep:89
	float n_in89p0 = 0.00000;
	float n_in89p1 = 0.10000;
	float n_out89p0;
	n_out89p0 = smoothstep( n_in89p0, n_in89p1, n_out107p0 );

// Input:33
	vec3 n_out33p0;
	n_out33p0 = vec3(UV,0.0);

// Scalar:35
	float n_out35p0;
	n_out35p0 = 4.000000;

// VectorOp:34
	vec3 n_out34p0;
	n_out34p0 = n_out33p0 * vec3(n_out35p0);

// Texture:86
	vec3 n_out86p0;
	float n_out86p1;
	vec4 tex_frg_86_read = texture( tex_frg_86 , n_out34p0.xy );
	n_out86p0 = tex_frg_86_read.rgb;
	n_out86p1 = tex_frg_86_read.a;

// ScalarOp:108
	float n_in108p1 = 1.00000;
	float n_out108p0;
	n_out108p0 = dot(n_out86p0,vec3(0.333333,0.333333,0.333333)) * n_in108p1;

// ScalarOp:25
	float n_out25p0;
	n_out25p0 = n_out89p0 * n_out108p0;

// ScalarSmoothStep:91
	float n_in91p0 = 0.00000;
	float n_in91p1 = 0.10000;
	float n_out91p0;
	n_out91p0 = smoothstep( n_in91p0, n_in91p1, n_out107p0 );

// ScalarOp:93
	float n_in93p1 = 6.00000;
	float n_out93p0;
	n_out93p0 = pow( n_out91p0 , n_in93p1 );

// ScalarOp:94
	float n_in94p1 = 3.00000;
	float n_out94p0;
	n_out94p0 = n_out93p0 * n_in94p1;

// Texture:109
	vec3 n_out109p0;
	float n_out109p1;
	vec4 tex_frg_109_read = texture( tex_frg_109 , UV.xy );
	n_out109p0 = tex_frg_109_read.rgb;
	n_out109p1 = tex_frg_109_read.a;

// ScalarSmoothStep:112
	float n_in112p0 = 0.50000;
	float n_in112p1 = 0.20000;
	float n_out112p0;
	n_out112p0 = smoothstep( n_in112p0, n_in112p1, dot(n_out109p0,vec3(0.333333,0.333333,0.333333)) );

// ScalarOp:113
	float n_in113p1 = 0.30000;
	float n_out113p0;
	n_out113p0 = n_out112p0 * n_in113p1;

// ScalarOp:110
	float n_out110p0;
	n_out110p0 = dot(n_out86p0,vec3(0.333333,0.333333,0.333333)) * n_out113p0;

// ScalarOp:111
	float n_out111p0;
	n_out111p0 = n_out94p0 + n_out110p0;

// ScalarOp:95
	float n_out95p0;
	n_out95p0 = n_out25p0 + n_out111p0;

// ScalarOp:100
	float n_out100p0;
	n_out100p0 = n_out106p0 + n_out95p0;

// ScalarClamp:96
	float n_in96p1 = 0.00000;
	float n_in96p2 = 1.00000;
	float n_out96p0;
	n_out96p0 = clamp( n_out100p0, n_in96p1, n_in96p2 );

// ScalarOp:114
	float n_in114p1 = 0.15000;
	float n_out114p0;
	n_out114p0 = min( n_out96p0 , n_in114p1 );

// VectorOp:26
	vec3 n_out26p0;
	n_out26p0 = n_out128p0 + vec3(n_out114p0);

// ScalarOp:115
	float n_in115p1 = 0.20000;
	float n_out115p0;
	n_out115p0 = max( n_out114p0 , n_in115p1 );

// ScalarFunc:38
	float n_out38p0;
	n_out38p0 = 1.0-n_out115p0;

// Scalar:4
	float n_out4p0;
	n_out4p0 = 0.050000;

// Scalar:17
	float n_out17p0;
	n_out17p0 = 0.400000;

// Scalar:13
	float n_out13p0;
	n_out13p0 = 0.990000;

// Output:0
	ALBEDO = n_out26p0;
	METALLIC = n_out38p0;
	ROUGHNESS = n_out4p0;
	NORMALMAP = n_out61p0;
	NORMALMAP_DEPTH = n_out17p0;
	SSS_STRENGTH = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -955.536, -779.522 )
modes/cull = 2
modes/depth_draw = 1
modes/specular = 2
nodes/vertex/0/position = Vector2( 800, 60 )
nodes/vertex/2/node = SubResource( 100 )
nodes/vertex/2/position = Vector2( -1120, 100 )
nodes/vertex/3/node = SubResource( 109 )
nodes/vertex/3/position = Vector2( -1560, 100 )
nodes/vertex/4/node = SubResource( 119 )
nodes/vertex/4/position = Vector2( -1700, -100 )
nodes/vertex/6/node = SubResource( 132 )
nodes/vertex/6/position = Vector2( -1560, -160 )
nodes/vertex/7/node = SubResource( 133 )
nodes/vertex/7/position = Vector2( -1560, 40 )
nodes/vertex/8/node = SubResource( 134 )
nodes/vertex/8/position = Vector2( -1560, -20 )
nodes/vertex/9/node = SubResource( 135 )
nodes/vertex/9/position = Vector2( -1540, 200 )
nodes/vertex/11/node = SubResource( 93 )
nodes/vertex/11/position = Vector2( -1560, -220 )
nodes/vertex/12/node = SubResource( 94 )
nodes/vertex/12/position = Vector2( -1040, -20 )
nodes/vertex/13/node = SubResource( 95 )
nodes/vertex/13/position = Vector2( -1200, -240 )
nodes/vertex/14/node = SubResource( 96 )
nodes/vertex/14/position = Vector2( -1060, -300 )
nodes/vertex/15/node = SubResource( 97 )
nodes/vertex/15/position = Vector2( -1060, -100 )
nodes/vertex/16/node = SubResource( 98 )
nodes/vertex/16/position = Vector2( -1060, -160 )
nodes/vertex/19/node = SubResource( 99 )
nodes/vertex/19/position = Vector2( -1040, -360 )
nodes/vertex/20/node = SubResource( 101 )
nodes/vertex/20/position = Vector2( -540, 80 )
nodes/vertex/23/node = SubResource( 102 )
nodes/vertex/23/position = Vector2( -1540, 260 )
nodes/vertex/24/node = SubResource( 103 )
nodes/vertex/24/position = Vector2( -500, 0 )
nodes/vertex/25/node = SubResource( 104 )
nodes/vertex/25/position = Vector2( -640, -200 )
nodes/vertex/26/node = SubResource( 105 )
nodes/vertex/26/position = Vector2( -500, -260 )
nodes/vertex/27/node = SubResource( 106 )
nodes/vertex/27/position = Vector2( -500, -60 )
nodes/vertex/28/node = SubResource( 107 )
nodes/vertex/28/position = Vector2( -500, -120 )
nodes/vertex/29/node = SubResource( 108 )
nodes/vertex/29/position = Vector2( -500, -320 )
nodes/vertex/30/node = SubResource( 110 )
nodes/vertex/30/position = Vector2( -220, 80 )
nodes/vertex/31/node = SubResource( 111 )
nodes/vertex/31/position = Vector2( 40, 300 )
nodes/vertex/32/node = SubResource( 112 )
nodes/vertex/32/position = Vector2( -280, 400 )
nodes/vertex/34/node = SubResource( 113 )
nodes/vertex/34/position = Vector2( -120, -20 )
nodes/vertex/35/node = SubResource( 114 )
nodes/vertex/35/position = Vector2( -260, -220 )
nodes/vertex/36/node = SubResource( 115 )
nodes/vertex/36/position = Vector2( -120, -280 )
nodes/vertex/37/node = SubResource( 116 )
nodes/vertex/37/position = Vector2( -120, -80 )
nodes/vertex/38/node = SubResource( 117 )
nodes/vertex/38/position = Vector2( -120, -140 )
nodes/vertex/39/node = SubResource( 118 )
nodes/vertex/39/position = Vector2( -120, -340 )
nodes/vertex/40/node = SubResource( 120 )
nodes/vertex/40/position = Vector2( 200, 40 )
nodes/vertex/41/node = SubResource( 121 )
nodes/vertex/41/position = Vector2( 580, 260 )
nodes/vertex/42/node = SubResource( 122 )
nodes/vertex/42/position = Vector2( 420, 120 )
nodes/vertex/43/node = SubResource( 125 )
nodes/vertex/43/position = Vector2( -2080, -760 )
nodes/vertex/44/node = SubResource( 126 )
nodes/vertex/44/position = Vector2( -2320, -620 )
nodes/vertex/45/node = SubResource( 127 )
nodes/vertex/45/position = Vector2( -1360, 60 )
nodes/vertex/46/node = SubResource( 128 )
nodes/vertex/46/position = Vector2( -860, 40 )
nodes/vertex/47/node = SubResource( 129 )
nodes/vertex/47/position = Vector2( -1400, -420 )
nodes/vertex/48/node = SubResource( 130 )
nodes/vertex/48/position = Vector2( -820, -480 )
nodes/vertex/49/node = SubResource( 131 )
nodes/vertex/49/position = Vector2( -1740, -700 )
nodes/vertex/connections = PoolIntArray( 4, 0, 2, 2, 6, 0, 2, 1, 8, 0, 2, 3, 3, 0, 2, 5, 13, 0, 20, 2, 16, 0, 20, 3, 9, 0, 2, 6, 23, 0, 2, 7, 2, 1, 20, 7, 2, 0, 20, 6, 25, 0, 30, 2, 26, 0, 30, 1, 28, 0, 30, 3, 27, 0, 30, 4, 24, 0, 30, 5, 29, 0, 30, 0, 20, 0, 30, 6, 20, 1, 30, 7, 32, 0, 31, 1, 30, 2, 31, 0, 20, 2, 32, 0, 2, 2, 32, 1, 35, 0, 40, 2, 36, 0, 40, 1, 38, 0, 40, 3, 37, 0, 40, 4, 34, 0, 40, 5, 30, 0, 40, 6, 30, 1, 40, 7, 40, 0, 0, 0, 40, 1, 0, 1, 31, 0, 41, 1, 41, 0, 0, 6, 40, 2, 42, 0, 42, 0, 41, 0, 44, 0, 43, 0, 7, 0, 45, 1, 45, 0, 2, 4, 43, 0, 46, 0, 14, 0, 20, 1, 15, 0, 20, 4, 46, 0, 20, 5, 12, 0, 46, 1, 11, 0, 47, 1, 47, 0, 2, 0, 19, 0, 48, 1, 48, 0, 20, 0, 48, 0, 40, 0, 43, 0, 49, 0, 49, 0, 45, 0, 49, 0, 47, 0, 49, 0, 48, 0 )
nodes/fragment/0/position = Vector2( 1380, 120 )
nodes/fragment/4/node = SubResource( 42 )
nodes/fragment/4/position = Vector2( 560, 400 )
nodes/fragment/13/node = SubResource( 30 )
nodes/fragment/13/position = Vector2( 560, 340 )
nodes/fragment/17/node = SubResource( 31 )
nodes/fragment/17/position = Vector2( 560, 480 )
nodes/fragment/20/node = SubResource( 34 )
nodes/fragment/20/position = Vector2( 300, -100 )
nodes/fragment/25/node = SubResource( 35 )
nodes/fragment/25/position = Vector2( -300, 220 )
nodes/fragment/26/node = SubResource( 36 )
nodes/fragment/26/position = Vector2( 780, -20 )
nodes/fragment/33/node = SubResource( 37 )
nodes/fragment/33/position = Vector2( -1580, 440 )
nodes/fragment/34/node = SubResource( 38 )
nodes/fragment/34/position = Vector2( -1400, 440 )
nodes/fragment/35/node = SubResource( 39 )
nodes/fragment/35/position = Vector2( -1580, 520 )
nodes/fragment/37/node = SubResource( 40 )
nodes/fragment/37/position = Vector2( 0, -60 )
nodes/fragment/38/node = SubResource( 41 )
nodes/fragment/38/position = Vector2( 1140, 160 )
nodes/fragment/40/node = SubResource( 43 )
nodes/fragment/40/position = Vector2( -420, 820 )
nodes/fragment/42/node = SubResource( 44 )
nodes/fragment/42/position = Vector2( -1160, 1020 )
nodes/fragment/43/node = SubResource( 45 )
nodes/fragment/43/position = Vector2( -940, 1040 )
nodes/fragment/44/node = SubResource( 46 )
nodes/fragment/44/position = Vector2( -1680, 1160 )
nodes/fragment/45/node = SubResource( 47 )
nodes/fragment/45/position = Vector2( -2180, 840 )
nodes/fragment/47/node = SubResource( 48 )
nodes/fragment/47/position = Vector2( -420, 1060 )
nodes/fragment/48/node = SubResource( 49 )
nodes/fragment/48/position = Vector2( -620, 900 )
nodes/fragment/49/node = SubResource( 50 )
nodes/fragment/49/position = Vector2( -940, 900 )
nodes/fragment/50/node = SubResource( 51 )
nodes/fragment/50/position = Vector2( -1340, 840 )
nodes/fragment/51/node = SubResource( 52 )
nodes/fragment/51/position = Vector2( -1140, 880 )
nodes/fragment/52/node = SubResource( 53 )
nodes/fragment/52/position = Vector2( -1960, 940 )
nodes/fragment/53/node = SubResource( 54 )
nodes/fragment/53/position = Vector2( -1660, 920 )
nodes/fragment/54/node = SubResource( 55 )
nodes/fragment/54/position = Vector2( -1400, 1240 )
nodes/fragment/55/node = SubResource( 56 )
nodes/fragment/55/position = Vector2( -940, 1180 )
nodes/fragment/56/node = SubResource( 57 )
nodes/fragment/56/position = Vector2( -1180, 1240 )
nodes/fragment/59/node = SubResource( 58 )
nodes/fragment/59/position = Vector2( -1600, 1260 )
nodes/fragment/60/node = SubResource( 59 )
nodes/fragment/60/position = Vector2( -640, 1140 )
nodes/fragment/61/node = SubResource( 60 )
nodes/fragment/61/position = Vector2( -200, 960 )
nodes/fragment/62/node = SubResource( 61 )
nodes/fragment/62/position = Vector2( -160, 1500 )
nodes/fragment/64/node = SubResource( 62 )
nodes/fragment/64/position = Vector2( -180, 1300 )
nodes/fragment/66/node = SubResource( 63 )
nodes/fragment/66/position = Vector2( -180, 1420 )
nodes/fragment/67/node = SubResource( 64 )
nodes/fragment/67/position = Vector2( -180, 1220 )
nodes/fragment/68/node = SubResource( 65 )
nodes/fragment/68/position = Vector2( -180, 1080 )
nodes/fragment/69/node = SubResource( 66 )
nodes/fragment/69/position = Vector2( -1440, 960 )
nodes/fragment/70/node = SubResource( 67 )
nodes/fragment/70/position = Vector2( -1680, 1080 )
nodes/fragment/71/node = SubResource( 68 )
nodes/fragment/71/position = Vector2( 380, 1140 )
nodes/fragment/72/node = SubResource( 69 )
nodes/fragment/72/position = Vector2( 380, 1040 )
nodes/fragment/74/node = SubResource( 70 )
nodes/fragment/74/position = Vector2( 300, 940 )
nodes/fragment/75/node = SubResource( 71 )
nodes/fragment/75/position = Vector2( 60, 940 )
nodes/fragment/76/node = SubResource( 72 )
nodes/fragment/76/position = Vector2( 780, 940 )
nodes/fragment/77/node = SubResource( 73 )
nodes/fragment/77/position = Vector2( 780, 1060 )
nodes/fragment/78/node = SubResource( 74 )
nodes/fragment/78/position = Vector2( 1160, 1120 )
nodes/fragment/79/node = SubResource( 75 )
nodes/fragment/79/position = Vector2( 960, 960 )
nodes/fragment/80/node = SubResource( 76 )
nodes/fragment/80/position = Vector2( 960, 1100 )
nodes/fragment/81/node = SubResource( 77 )
nodes/fragment/81/position = Vector2( 1140, 980 )
nodes/fragment/82/node = SubResource( 78 )
nodes/fragment/82/position = Vector2( 1320, 1000 )
nodes/fragment/83/node = SubResource( 79 )
nodes/fragment/83/position = Vector2( 1540, 1020 )
nodes/fragment/84/node = SubResource( 80 )
nodes/fragment/84/position = Vector2( 540, 900 )
nodes/fragment/85/node = SubResource( 81 )
nodes/fragment/85/position = Vector2( -240, -60 )
nodes/fragment/86/node = SubResource( 82 )
nodes/fragment/86/position = Vector2( -1140, 460 )
nodes/fragment/87/node = SubResource( 83 )
nodes/fragment/87/position = Vector2( -1180, 380 )
nodes/fragment/89/node = SubResource( 84 )
nodes/fragment/89/position = Vector2( -680, 340 )
nodes/fragment/91/node = SubResource( 85 )
nodes/fragment/91/position = Vector2( -680, 460 )
nodes/fragment/92/node = SubResource( 86 )
nodes/fragment/92/position = Vector2( 1380, 20 )
nodes/fragment/93/node = SubResource( 87 )
nodes/fragment/93/position = Vector2( -280, 400 )
nodes/fragment/94/node = SubResource( 88 )
nodes/fragment/94/position = Vector2( -100, 320 )
nodes/fragment/95/node = SubResource( 89 )
nodes/fragment/95/position = Vector2( 240, 200 )
nodes/fragment/96/node = SubResource( 90 )
nodes/fragment/96/position = Vector2( 580, 120 )
nodes/fragment/97/node = SubResource( 91 )
nodes/fragment/97/position = Vector2( -900, -140 )
nodes/fragment/98/node = SubResource( 92 )
nodes/fragment/98/position = Vector2( -700, 200 )
nodes/fragment/100/node = SubResource( 1 )
nodes/fragment/100/position = Vector2( 420, 120 )
nodes/fragment/101/node = SubResource( 2 )
nodes/fragment/101/position = Vector2( -1280, -100 )
nodes/fragment/102/node = SubResource( 3 )
nodes/fragment/102/position = Vector2( -1140, -20 )
nodes/fragment/103/node = SubResource( 4 )
nodes/fragment/103/position = Vector2( -1360, 60 )
nodes/fragment/106/node = SubResource( 5 )
nodes/fragment/106/position = Vector2( -320, 40 )
nodes/fragment/107/node = SubResource( 6 )
nodes/fragment/107/position = Vector2( -960, 360 )
nodes/fragment/108/node = SubResource( 7 )
nodes/fragment/108/position = Vector2( -860, 540 )
nodes/fragment/109/node = SubResource( 10 )
nodes/fragment/109/position = Vector2( -1520, 640 )
nodes/fragment/110/node = SubResource( 11 )
nodes/fragment/110/position = Vector2( -760, 700 )
nodes/fragment/111/node = SubResource( 12 )
nodes/fragment/111/position = Vector2( 80, 320 )
nodes/fragment/112/node = SubResource( 13 )
nodes/fragment/112/position = Vector2( -1240, 720 )
nodes/fragment/113/node = SubResource( 14 )
nodes/fragment/113/position = Vector2( -980, 720 )
nodes/fragment/114/node = SubResource( 15 )
nodes/fragment/114/position = Vector2( 760, 100 )
nodes/fragment/115/node = SubResource( 16 )
nodes/fragment/115/position = Vector2( 960, 120 )
nodes/fragment/117/node = SubResource( 17 )
nodes/fragment/117/position = Vector2( -2500, 240 )
nodes/fragment/117/size = Vector2( 562, 232 )
nodes/fragment/117/input_ports = "0,0,near;1,0,far;2,0,depth;"
nodes/fragment/117/output_ports = "0,0,difference;"
nodes/fragment/117/expression = "depth = 2.0 * depth - 1.0;
difference = near * far / (far + depth * (near - far));"
nodes/fragment/118/node = SubResource( 18 )
nodes/fragment/118/position = Vector2( -3140, 220 )
nodes/fragment/119/node = SubResource( 19 )
nodes/fragment/119/position = Vector2( -2860, 220 )
nodes/fragment/120/node = SubResource( 20 )
nodes/fragment/120/position = Vector2( -3200, 780 )
nodes/fragment/121/node = SubResource( 21 )
nodes/fragment/121/position = Vector2( -2860, 760 )
nodes/fragment/122/node = SubResource( 22 )
nodes/fragment/122/position = Vector2( -2540, 520 )
nodes/fragment/122/size = Vector2( 562, 232 )
nodes/fragment/122/input_ports = "0,0,near;1,0,far;2,0,depth;"
nodes/fragment/122/output_ports = "0,0,difference;"
nodes/fragment/122/expression = "depth = 2.0 * depth - 1.0;
difference = near * far / (far + depth * (near - far));"
nodes/fragment/123/node = SubResource( 23 )
nodes/fragment/123/position = Vector2( -3020, 440 )
nodes/fragment/124/node = SubResource( 24 )
nodes/fragment/124/position = Vector2( -3020, 540 )
nodes/fragment/125/node = SubResource( 25 )
nodes/fragment/125/position = Vector2( -1840, 340 )
nodes/fragment/126/node = SubResource( 26 )
nodes/fragment/126/position = Vector2( -1340, 320 )
nodes/fragment/127/node = SubResource( 27 )
nodes/fragment/127/position = Vector2( -1600, 260 )
nodes/fragment/128/node = SubResource( 28 )
nodes/fragment/128/position = Vector2( 560, -20 )
nodes/fragment/129/node = SubResource( 29 )
nodes/fragment/129/position = Vector2( 320, -200 )
nodes/fragment/connections = PoolIntArray( 33, 0, 34, 0, 35, 0, 34, 1, 37, 0, 20, 0, 17, 0, 0, 9, 42, 0, 43, 0, 44, 0, 43, 1, 43, 0, 48, 1, 48, 0, 40, 0, 49, 0, 48, 0, 50, 0, 51, 0, 51, 0, 49, 0, 52, 0, 53, 0, 55, 0, 60, 0, 43, 0, 60, 1, 60, 0, 47, 0, 47, 0, 61, 1, 62, 0, 66, 0, 66, 0, 64, 0, 64, 0, 67, 0, 67, 0, 68, 0, 68, 0, 61, 2, 70, 0, 69, 1, 45, 0, 52, 0, 53, 0, 69, 0, 69, 0, 49, 1, 69, 0, 55, 1, 59, 0, 54, 0, 54, 0, 56, 0, 56, 0, 55, 0, 61, 0, 75, 0, 75, 0, 74, 0, 72, 0, 76, 1, 71, 0, 77, 1, 76, 0, 79, 0, 77, 0, 79, 1, 79, 0, 81, 0, 80, 0, 81, 1, 80, 0, 78, 0, 82, 1, 83, 1, 81, 0, 82, 0, 78, 2, 83, 2, 61, 0, 0, 8, 74, 0, 84, 0, 83, 0, 85, 0, 85, 0, 37, 0, 84, 0, 76, 0, 84, 0, 77, 0, 34, 0, 86, 0, 13, 0, 0, 16, 89, 0, 25, 0, 82, 0, 83, 0, 91, 0, 93, 0, 93, 0, 94, 0, 4, 0, 0, 3, 25, 0, 95, 0, 95, 0, 100, 1, 101, 0, 102, 0, 103, 0, 102, 1, 102, 0, 97, 0, 100, 0, 96, 0, 98, 0, 106, 1, 106, 0, 100, 0, 87, 0, 107, 0, 107, 0, 98, 2, 107, 0, 89, 2, 107, 0, 91, 2, 86, 0, 108, 0, 108, 0, 25, 1, 86, 0, 110, 0, 40, 0, 61, 0, 111, 0, 95, 1, 94, 0, 111, 0, 110, 0, 111, 1, 109, 0, 112, 2, 112, 0, 113, 0, 113, 0, 110, 1, 96, 0, 114, 0, 114, 0, 26, 1, 97, 0, 106, 0, 38, 0, 0, 2, 114, 0, 115, 0, 115, 0, 38, 0, 118, 0, 119, 0, 120, 0, 121, 0, 119, 0, 117, 2, 124, 0, 122, 1, 123, 0, 122, 0, 121, 2, 122, 2, 123, 0, 117, 0, 124, 0, 117, 1, 117, 0, 125, 0, 122, 0, 125, 1, 125, 0, 127, 0, 127, 0, 126, 0, 126, 0, 128, 2, 20, 0, 128, 1, 129, 0, 128, 0, 26, 0, 0, 0, 128, 0, 26, 0 )
